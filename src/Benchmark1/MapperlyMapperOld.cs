// <auto-generated />
#nullable enable
namespace Mapperly_Benchmark.Benchmark2
{
    public static class MapperlyMapperOld
    {
        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        public static global::Mapperly_Benchmark.Benchmark2.Models.ClassSpotifyAlbum? MapToClass(global::Mapperly_Benchmark.Benchmark2.Models.SpotifyAlbumDto? spotifyAlbumDto)
        {
            if (spotifyAlbumDto == null)
                return default;
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassSpotifyAlbum();
            if (spotifyAlbumDto.Artists != null)
            {
                target.Artists = MapToClassArtistArray(spotifyAlbumDto.Artists);
            }
            else
            {
                target.Artists = null;
            }
            if (spotifyAlbumDto.Copyrights != null)
            {
                target.Copyrights = MapToClassCopyrightArray(spotifyAlbumDto.Copyrights);
            }
            else
            {
                target.Copyrights = null;
            }
            if (spotifyAlbumDto.ExternalIds != null)
            {
                target.ExternalIds = MapToClassExternalIds(spotifyAlbumDto.ExternalIds);
            }
            else
            {
                target.ExternalIds = null;
            }
            if (spotifyAlbumDto.ExternalUrls != null)
            {
                target.ExternalUrls = MapToClassExternalUrls(spotifyAlbumDto.ExternalUrls);
            }
            else
            {
                target.ExternalUrls = null;
            }
            if (spotifyAlbumDto.Images != null)
            {
                target.Images = MapToClassImageArray(spotifyAlbumDto.Images);
            }
            else
            {
                target.Images = null;
            }
            if (spotifyAlbumDto.Tracks != null)
            {
                target.Tracks = MapToClassTracks(spotifyAlbumDto.Tracks);
            }
            else
            {
                target.Tracks = null;
            }
            target.AlbumType = spotifyAlbumDto.AlbumType;
            target.AvailableMarkets = spotifyAlbumDto.AvailableMarkets;
            target.Href = spotifyAlbumDto.Href;
            target.Id = spotifyAlbumDto.Id;
            target.Name = spotifyAlbumDto.Name;
            target.Popularity = spotifyAlbumDto.Popularity;
            target.ReleaseDate = spotifyAlbumDto.ReleaseDate;
            target.ReleaseDatePrecision = spotifyAlbumDto.ReleaseDatePrecision;
            target.Type = spotifyAlbumDto.Type;
            target.Uri = spotifyAlbumDto.Uri;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        public static global::Mapperly_Benchmark.Benchmark2.Models.StructSpotifyAlbum MapToStruct(global::Mapperly_Benchmark.Benchmark2.Models.SpotifyAlbumDto? spotifyAlbumDto)
        {
            if (spotifyAlbumDto == null)
                throw new System.ArgumentNullException(nameof(spotifyAlbumDto));
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructSpotifyAlbum();
            if (spotifyAlbumDto.Artists != null)
            {
                target.Artists = MapToStructArtistArray(spotifyAlbumDto.Artists);
            }
            else
            {
                target.Artists = null;
            }
            if (spotifyAlbumDto.Copyrights != null)
            {
                target.Copyrights = MapToStructCopyrightArray(spotifyAlbumDto.Copyrights);
            }
            else
            {
                target.Copyrights = null;
            }
            if (spotifyAlbumDto.ExternalIds != null)
            {
                target.ExternalIds = MapToStructExternalIds(spotifyAlbumDto.ExternalIds);
            }
            if (spotifyAlbumDto.ExternalUrls != null)
            {
                target.ExternalUrls = MapToStructExternalUrls(spotifyAlbumDto.ExternalUrls);
            }
            if (spotifyAlbumDto.Images != null)
            {
                target.Images = MapToStructImageArray(spotifyAlbumDto.Images);
            }
            else
            {
                target.Images = null;
            }
            if (spotifyAlbumDto.Tracks != null)
            {
                target.Tracks = MapToStructTracks(spotifyAlbumDto.Tracks);
            }
            target.AlbumType = spotifyAlbumDto.AlbumType;
            target.AvailableMarkets = spotifyAlbumDto.AvailableMarkets;
            target.Href = spotifyAlbumDto.Href;
            target.Id = spotifyAlbumDto.Id;
            target.Name = spotifyAlbumDto.Name;
            target.Popularity = spotifyAlbumDto.Popularity;
            target.ReleaseDate = spotifyAlbumDto.ReleaseDate;
            target.ReleaseDatePrecision = spotifyAlbumDto.ReleaseDatePrecision;
            target.Type = spotifyAlbumDto.Type;
            target.Uri = spotifyAlbumDto.Uri;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassArtist? MapToClassArtist(global::Mapperly_Benchmark.Benchmark2.Models.ArtistDto? source)
        {
            if (source == null)
                return default;
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassArtist();
            if (source.ExternalUrls != null)
            {
                target.ExternalUrls = MapToClassExternalUrls(source.ExternalUrls);
            }
            else
            {
                target.ExternalUrls = null;
            }
            target.Href = source.Href;
            target.Id = source.Id;
            target.Name = source.Name;
            target.Type = source.Type;
            target.Uri = source.Uri;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassArtist?[] MapToClassArtistArray(global::Mapperly_Benchmark.Benchmark2.Models.ArtistDto?[] source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassArtist?[source.Length];
            for (var i = 0; i < source.Length; i++)
            {
                target[i] = MapToClassArtist(source[i]);
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassCopyright? MapToClassCopyright(global::Mapperly_Benchmark.Benchmark2.Models.CopyrightDto? source)
        {
            if (source == null)
                return default;
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassCopyright();
            target.Text = source.Text;
            target.Type = source.Type;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassCopyright?[] MapToClassCopyrightArray(global::Mapperly_Benchmark.Benchmark2.Models.CopyrightDto?[] source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassCopyright?[source.Length];
            for (var i = 0; i < source.Length; i++)
            {
                target[i] = MapToClassCopyright(source[i]);
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassExternalIds MapToClassExternalIds(global::Mapperly_Benchmark.Benchmark2.Models.ExternalIdsDto source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassExternalIds();
            target.Upc = source.Upc;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassExternalUrls MapToClassExternalUrls(global::Mapperly_Benchmark.Benchmark2.Models.ExternalUrlsDto source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassExternalUrls();
            target.Spotify = source.Spotify;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassImage? MapToClassImage(global::Mapperly_Benchmark.Benchmark2.Models.ImageDto? source)
        {
            if (source == null)
                return default;
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassImage();
            target.Height = source.Height;
            target.Url = source.Url;
            target.Width = source.Width;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassImage?[] MapToClassImageArray(global::Mapperly_Benchmark.Benchmark2.Models.ImageDto?[] source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassImage?[source.Length];
            for (var i = 0; i < source.Length; i++)
            {
                target[i] = MapToClassImage(source[i]);
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassTracks MapToClassTracks(global::Mapperly_Benchmark.Benchmark2.Models.TracksDto source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassTracks();
            if (source.Items != null)
            {
                target.Items = MapToClassItemArray(source.Items);
            }
            else
            {
                target.Items = null;
            }
            target.Href = source.Href;
            target.Limit = source.Limit;
            target.Offset = source.Offset;
            target.Total = source.Total;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructArtist MapToStructArtist(global::Mapperly_Benchmark.Benchmark2.Models.ArtistDto? source)
        {
            if (source == null)
                throw new System.ArgumentNullException(nameof(source));
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructArtist();
            if (source.ExternalUrls != null)
            {
                target.ExternalUrls = MapToStructExternalUrls(source.ExternalUrls);
            }
            target.Href = source.Href;
            target.Id = source.Id;
            target.Name = source.Name;
            target.Type = source.Type;
            target.Uri = source.Uri;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructArtist[] MapToStructArtistArray(global::Mapperly_Benchmark.Benchmark2.Models.ArtistDto?[] source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructArtist[source.Length];
            for (var i = 0; i < source.Length; i++)
            {
                target[i] = MapToStructArtist(source[i]);
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructCopyright MapToStructCopyright(global::Mapperly_Benchmark.Benchmark2.Models.CopyrightDto? source)
        {
            if (source == null)
                throw new System.ArgumentNullException(nameof(source));
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructCopyright();
            target.Text = source.Text;
            target.Type = source.Type;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructCopyright[] MapToStructCopyrightArray(global::Mapperly_Benchmark.Benchmark2.Models.CopyrightDto?[] source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructCopyright[source.Length];
            for (var i = 0; i < source.Length; i++)
            {
                target[i] = MapToStructCopyright(source[i]);
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructExternalIds MapToStructExternalIds(global::Mapperly_Benchmark.Benchmark2.Models.ExternalIdsDto source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructExternalIds();
            target.Upc = source.Upc;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructExternalUrls MapToStructExternalUrls(global::Mapperly_Benchmark.Benchmark2.Models.ExternalUrlsDto source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructExternalUrls();
            target.Spotify = source.Spotify;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructImage MapToStructImage(global::Mapperly_Benchmark.Benchmark2.Models.ImageDto? source)
        {
            if (source == null)
                throw new System.ArgumentNullException(nameof(source));
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructImage();
            target.Height = source.Height;
            target.Url = source.Url;
            target.Width = source.Width;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructImage[] MapToStructImageArray(global::Mapperly_Benchmark.Benchmark2.Models.ImageDto?[] source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructImage[source.Length];
            for (var i = 0; i < source.Length; i++)
            {
                target[i] = MapToStructImage(source[i]);
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructTracks MapToStructTracks(global::Mapperly_Benchmark.Benchmark2.Models.TracksDto source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructTracks();
            if (source.Items != null)
            {
                target.Items = MapToStructItemArray(source.Items);
            }
            else
            {
                target.Items = null;
            }
            target.Href = source.Href;
            target.Limit = source.Limit;
            target.Offset = source.Offset;
            target.Total = source.Total;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassItem? MapToClassItem(global::Mapperly_Benchmark.Benchmark2.Models.ItemDto? source)
        {
            if (source == null)
                return default;
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassItem();
            if (source.Artists != null)
            {
                target.Artists = MapToClassArtistArray(source.Artists);
            }
            else
            {
                target.Artists = null;
            }
            if (source.ExternalUrls != null)
            {
                target.ExternalUrls = MapToClassExternalUrls(source.ExternalUrls);
            }
            else
            {
                target.ExternalUrls = null;
            }
            target.AvailableMarkets = source.AvailableMarkets;
            target.DiscNumber = source.DiscNumber;
            target.DurationMs = source.DurationMs;
            target.Explicit = source.Explicit;
            target.Href = source.Href;
            target.Id = source.Id;
            target.Name = source.Name;
            target.PreviewUrl = source.PreviewUrl;
            target.TrackNumber = source.TrackNumber;
            target.Type = source.Type;
            target.Uri = source.Uri;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.ClassItem?[] MapToClassItemArray(global::Mapperly_Benchmark.Benchmark2.Models.ItemDto?[] source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.ClassItem?[source.Length];
            for (var i = 0; i < source.Length; i++)
            {
                target[i] = MapToClassItem(source[i]);
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructItem MapToStructItem(global::Mapperly_Benchmark.Benchmark2.Models.ItemDto? source)
        {
            if (source == null)
                throw new System.ArgumentNullException(nameof(source));
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructItem();
            if (source.Artists != null)
            {
                target.Artists = MapToStructArtistArray(source.Artists);
            }
            else
            {
                target.Artists = null;
            }
            if (source.ExternalUrls != null)
            {
                target.ExternalUrls = MapToStructExternalUrls(source.ExternalUrls);
            }
            target.AvailableMarkets = source.AvailableMarkets;
            target.DiscNumber = source.DiscNumber;
            target.DurationMs = source.DurationMs;
            target.Explicit = source.Explicit;
            target.Href = source.Href;
            target.Id = source.Id;
            target.Name = source.Name;
            target.PreviewUrl = source.PreviewUrl;
            target.TrackNumber = source.TrackNumber;
            target.Type = source.Type;
            target.Uri = source.Uri;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "3.6.0.0")]
        private static global::Mapperly_Benchmark.Benchmark2.Models.StructItem[] MapToStructItemArray(global::Mapperly_Benchmark.Benchmark2.Models.ItemDto?[] source)
        {
            var target = new global::Mapperly_Benchmark.Benchmark2.Models.StructItem[source.Length];
            for (var i = 0; i < source.Length; i++)
            {
                target[i] = MapToStructItem(source[i]);
            }
            return target;
        }
    }
}

